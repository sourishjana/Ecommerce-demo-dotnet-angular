> mkdir ecom
> cd ecom
ecom> dotnet -h
ecom> dotnet new sln
ecom> dotnet new webapi -o API
ecom> dotnet sln -h
ecom> dotnet sln add API

ecom> dotnet new classlib -o Core
ecom> dotnet new classlib -o Infrastructure
ecom> dotnet sln add Core
ecom> dotnet sln add Infrastructure


Here Core will contain all our entities
Infrastructure will contain all our migrations

In API add refrence of Infrastructure
In Infrastructure add reference of Core


Add a .gitignore file in the ecom dir

and initialize git repo in the ecom

Here we will be using repository pattern:----------------------------------------

Client request
Controllers (IRepository)	---> GetProducts(), GetProduct(int id)
Repository 			---> _context.Products.ToList()
DbContext			---> select * from products
database 


Add EntityFramework in the Infrastructure class lib by:
Infrastructure -> Dependencies -> rightclick -> Manage Newget packages -> browse -> EntityFramework -> add

All the verions of packages must be same to the 
dotnet version
e.g 5.0.4 should be followed when installing packages


PM> dotnet
PM> dotnet --version
5.0.404

PM> dotnet tool install --global dotnet-ef 		// we cant just download any version , vsersion must be >=dotnet package
PM> dotnet tool install --global dotnet-ef --version 5.0.4
PM> dotnet tool list -g
PM> dotnet ef -h
PM> dotnet ef migrations add InitialCreate -o Data/Migrations // will not work as we need to goto a perticular dir
PM> dir
PM> cd API
PM> dotnet ef migrations add InitialCreate -o Data/Migrations // migrations created in a specific dir
PM> dotnet ef database -h 
PM> dotnet ef database update



Use 
using Microsoft.EntityFrameworkCore;
instead of
using System.Data.Entity;


In order to create new Migration from begining:
1) Goto sqlserver and delete all tables inside the DB
2) and Remove all the migrations from the Migrations folder
3) again add migrations

In order to generate migrations in a particular class lib dir

first goto the project level from a particlar class lib or project:
If we are inside API:

PM> cd ..
PM> dir

Now we are in base dir i.e Ecom

PM> dotnet ef migrations add InitialCreate -p Infrastructure -s API -o Data/Migrations

dotnet ef -> the package name
migrations -> we will be working with migrations
add InitialCreate -> adding a new migrations 
-p Infrastructure -> the project where we are applying migrations
-s API -> need to specify starting project 
-o Data/Migrations -> In which folder we need to save the Migrations



Any Intermediate Migration in between after changing some table column or adding a table:

PM> dotnet ef migrations add OrderEntityAdded-2 -p Infrastructure -s API -c StoreContext

After that instead of database-update we need to do this folling code as it automatically runs database update 
when we are running the project:
Add this piece of code once in the startUp.cs file and after running once donot run again

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ILoggerFactory loggerFactory)
        {
            // Use only when there is any db updates:--------------------------------------------------------------------------------
            using (var serviceScope = app.ApplicationServices.GetRequiredService<IServiceScopeFactory>().CreateScope())
            {
                var context = serviceScope.ServiceProvider.GetService<StoreContext>();
                context.Database.Migrate();
            }
	    //-----------------------------------------------------------------------------------------------------------------------
            //app.UseMiddleware<ExceptionMiddleware>(); // to format the error responses

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseSwagger();
                app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "API v1"));
            }

            app.UseStatusCodePagesWithReExecute("/errors/{0}"); // to handle page not found - it will hit the ErrorController

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseStaticFiles(); // load static images -

            app.UseCors("CorsPolicy"); // adding cors 

            app.UseAuthentication(); // adding authentication

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }




CHANGES TILL NOW DONOT MAKE SENSE:
1) In the Program.cs file we have changes the main method which helps in 
	Applying the migrations and creating the Database at app startup
2) In the Infrastructure we added 'SeedData' folder and 'StoreContextSeed.cs' file
	which is used to add data from the json file to the tables on app startup



IN ORDER TO GET DATA INTO OUR SQL TABLES FROM JSON FILES:--------------------------------------

USE [EcomDB]
GO

/*  

F:\dotnet+angular\ecom\EXTRAS\SeedData\brands.json
is just the path 
copy path and paste it here 

Below code is to add json data from a fiel.json to sql server table

*/

Declare @JSON varchar(max)
SELECT @JSON=BulkColumn
FROM OPENROWSET (BULK 'F:\dotnet+angular\ecom\EXTRAS\SeedData\brands.json', SINGLE_CLOB) import

INSERT INTO [dbo].[ProductBrands]
SELECT *
FROM OPENJSON (@JSON)
WITH 
(
	[Name] nvarchar(max)
)
GO


delete from [dbo].[ProductBrands]

select * from [dbo].[ProductBrands]

/*

Below code
Used to reset the index to 1 so that indexing can again start from 1

*/
DBCC CHECKIDENT ('[ProductBrands]', RESEED, 0);
GO



2 branch created:
1) boilerplare_code
2) main-advanced

In order to push code in main-advanced branch now onwards:

> git checkout -b main-advanced
> git add .
> git commit -m "Repository Pattern Added advanced"
> git push origin main-advanced
> git status
	On branch main-advanced
	nothing to commit, working tree clean


> git branch
  main
* main-advanced

> git checkout main
Switched to branch 'main'
Your branch is up to date with 'origin/main'.

> git branch
* main
  main-advanced

> git checkout main-advanced
Switched to branch 'main-advanced'

> git branch
  main
* main-advanced



We can switch between branches and we can see diff codes totally 
even locally
we can see in which branch we are in by using 'git branch'

We can clone code from a branch:
git clone -b <branchname> <remote-repo-url>

git pull   ->   to pull changes from main tracked branch


In order to use DTO:
we need 
AutoMapper.Extensions.Microsoft.DependencyInjection


NOTE:
Loading static files:
Those files which needs to be loaded as it is when we are hitting an url needs to be kept under
'wwwroot' folder inside main project (In our API)

And we need to add a middleware in the Configure Method in Startup.cs
NOTE: as sequencing of middlewares are important:----------------------------------------------

We need to add one middleware 'app.UseStaticFiles()' under the 'app.UseRouting()'

	app.UseRouting();

        app.UseStaticFiles(); // load static images -

And Job is done



ALLOW CORS:--------------------------------------------------------------------------------------------------

using API.Helpers;
using API.Middleware;
using Core.Interfaces;
using Infrastructure.Data;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Diagnostics;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.OpenApi.Models;
using Newtonsoft.Json;

namespace API
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers();
            // to pass _repo in ProductsController
            services.AddScoped<IProductRepository,ProductRepository>(); 
            // used to add connection string in the DbContext class
            services.AddDbContext<StoreContext>(options =>
            {
                options.UseSqlServer(Configuration["ConnectionString:EcomDB"]);
            });
            // to map DTOs to Entities
            services.AddAutoMapper(typeof(MappingProfiles));

            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "API", Version = "v1" });
            });

            // adding the src from where we will only be accepting http requests-------------------------here-------------------------
            services.AddCors(opt =>
            {
                opt.AddPolicy("CorsPolicy", policy =>
                {
                    policy.AllowAnyHeader().AllowAnyMethod().AllowAnyOrigin(); // accepting http req from any origin
                    //policy.AllowAnyHeader().AllowAnyMethod().WithOrigins("https://localhost:4200");
                });
            });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            //app.UseMiddleware<ExceptionMiddleware>(); // to format the error responses

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseSwagger();
                app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "API v1"));
            }

            app.UseStatusCodePagesWithReExecute("/errors/{0}"); // to handle page not found - it will hit the ErrorController

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseStaticFiles(); // load static images -

            app.UseCors("CorsPolicy"); // adding cors ----------------------------------------------------here------------------------

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}




CLIENT:-------------------------------------------------------------------------------------------------------------

We will be using angular boostrap: link: https://valor-software.com/ngx-bootstrap/#/

In order to test versions: https://unpkg.com/browse/@angular/core@12.2.13/package.json

In order to use nvm: we need to open cmd as administrator and use nvm commands:
> nvm ls
> nvm use [version-name]


In order to add bootswatch:-------------------------------------------------------------------------------------------------------------------------

> npm i bootswatch

Then in styles.css: -> add this below line:

import "bootswatch/dist/[theme]/bootstrap.min.css";

-----------------------------------------------------------------------------------------------------------------------------------------------------

add bootstrap and styles to our project:

> ng add ngx-bootstrap
> npm install font-awesome

Inside angular.json:
Under "architect" we need to add

	    "styles": [
              "./node_modules/bootstrap/dist/css/bootstrap.min.css",
              "./node_modules/ngx-bootstrap/datepicker/bs-datepicker.css",
              "./node_modules/font-awesome/css/font-awesome.min.css",
              "src/styles.scss"
            ],


In order to not include test files:
> ng g c nav-bar --skip-tests



Observables:

A sequence of items that arrives asynchronously over time.

Promises :

				 Succeed
				/
--------->	then	------->
				\
				 fail

Observables:

	    Cancel
	  /
--------->
	  \
	    fail/succeed ----> subscribe()  ----> map() ------> filter() ----> data




			GET api/products
Angular http client ------------------------> API
		    <------------------------
			http response: products[]
observables of products[]
	|
	|
map to a certain type of data
{product[], pageNumber, Count}
	|
	| subscribe
	|
shop component
	


HTTP, Observables, RxJS

1) HTTP Get request from ShopService
2) Receive the Observable and cast it into a Products array
3) Subscribe to observable from the component
4) Assign the products array to a local variable

RxJS:

1) Reactive extension of Javascript
2) Utility library to work with observables
3) Uses the pipe() method to chain RxJS operators together



Creating component withot generating a new folder:
> ng g c shop --skip-tests --flat 

Creating a service without generating a new folder:
> ng g s shop --skip-tests --flat


* -> 'asterik' means it will change something in the dom
e.g -> *ngFor


RsJS is used to manipulate Observables:

    return this.http.get<Pagination>(this.baseUrl+'products',{observe:'response',params})
      .pipe(
        map(resp=>{
          return resp.body
        })
      )


NOTE:
In tsconfig.json:
  "angularCompilerOptions": {
    "strictDomEventTypes":false, // add this line---------------------------------------
    "enableI18nLegacyMessageIdFormat": false
  }


ViewChild
DECORATOR
Property decorator that configures a view query. The change detector looks for the first element or 
the directive matching the selector in the view DOM. If the view DOM changes, and a new child matches the selector, 
the property is updated.



Implement lazy loading in Angular:
Set routes inside diff modules for module specific routes instead of loading them in the app.module.ts
If we specify all the routs in app module than all the other modules are loaded at the same time
 when app module is loaded

We will load the module specific routes when user wants that module specific route



Client - Error Handling:---------------------------------

To handle errors we receive from the API centrally and handled by http interceptors:

HttpInterceptor takes the type of error and redirects to a particular error route page


Client - Pazzazz:------------------------------------------

Improving UI of the application

NOTE:
npm ERR! ERESOLVE unable to resolve dependency tree -> this kind of err while installing npm packages

use 
> npm i xng-breadcrumb --legacy-peer-deps

USe this version:
npm i xng-breadcrumb@6.6.0 --legacy-peer-deps


Now breadcrumb is added as a global service and we can set its values by just adding its service as dependency injection


In order to use bootswatch in project:------

> npm i bootswatch

In the file angular.json we need to add "./node_modules/bootswatch/dist/united/bootstrap.min.css", inside "styles:[]" 
and restart the application


We can add a spinner utill all the things loads:----

> npm i ngx-spinner --legacy-peer-deps

Search ngx spinner and see how it is used



API - Basket:----------------------------------------------------------------

For basket we donto need to store data in DB
We will use Reddis for this which is an inmemory data store
is uses a key value pair ds

Redis:
1) In-memory data structure store
2) Supports strings, hashes, lists, sets, etc
3) key value store
4) Fast
5) Persists data by using snapshots every minute
6) Data can be given time to live
7) Great for caching data





Identity:----------------------------------------------------------------------------------------------------------------

Packages we need to install:

Add in Core project: 
Microsoft.AspNetCore.Identity.EntityFrameworkCore -> it contains all the classes required for making tables

Add in Infrastructure:
Microsoft.AspNetCore.Identity -> It contains the usermanager and signin manager
Microsoft.IdentityModel.Tokens -> Provides support for security tokens
System.IdentityModel.Tokens.Jwt -> for creating and validating JSON web tokens


Inside Core/Entities folder:
Create a seperate folder called Identity where we will be storing all identity classes

AppUser.cs:
using Microsoft.AspNetCore.Identity;

namespace Core.Entities.Identity
{
    public class AppUser:IdentityUser
    {
        public string DisplayName { get; set; }
        public Address Address { get; set; }
    }
}

Address.cs:
using System.ComponentModel.DataAnnotations;

namespace Core.Entities.Identity
{
    public class Address
    {
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Street { get; set; }
        public string City { get; set; }
        public string State { get; set; }
        public string PinCode { get; set; }

        [Required]
        public string AppUserId { get; set; }
        public AppUser AppUser { get; set; }
    }
}

We have only one address for one AppUser


Inside Infrastructure create identity folder:
Inside Infrastructure/Identity:

AppIdentutyDbContext.cs:
using Core.Entities.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace Infrastructure.Identity
{
    public class AppIdentityDbContext : IdentityDbContext<AppUser>
    {
        public AppIdentityDbContext(DbContextOptions<AppIdentityDbContext> options) : base(options)
        {
        }

        protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);
        }
    }
}

Inside API/StartUp.cs:
Inside ConfigureServices method:

            services.AddDbContext<AppIdentityDbContext>(options =>
            {
                options.UseSqlServer(Configuration["ConnectionString:IdentityConnection"]);
            });

            var builder = services.AddIdentityCore<AppUser>();
            builder = new IdentityBuilder(builder.UserType, builder.Services);
            builder.AddEntityFrameworkStores<AppIdentityDbContext>();
            builder.AddSignInManager<SignInManager<AppUser>>();
            services.AddAuthentication();

Inside appsettings.Development.json:
  "ConnectionString": {
    "EcomDB": "server=DESKTOP-DJ3D3T0\\SQLSERVER;database=EcomDB;Trusted_Connection=True;MultipleActiveResultSets=True",
    "Redis": "localhost",
    "IdentityConnection": "server=DESKTOP-DJ3D3T0\\SQLSERVER;database=IdentityDB;Trusted_Connection=True;MultipleActiveResultSets=True"
  },




In order to add migrations in a specific dir for a specific DbContext
-c AppIdentityDbContext -> is the cbcontext

PM> dotnet ef migrations add IdentityInitial -p Infrastructure -s API -c AppIdentityDbContext -o Identity/Migrations


Inside Infrastructure/Identity/Migrations we will have all the migrations

Inside API/Program.cs:

        public static async Task Main(string[] args)
        {
            var host = CreateHostBuilder(args).Build();
            using var scope = host.Services.CreateScope();
            var services = scope.ServiceProvider;
            var loggerFactory = services.GetRequiredService<ILoggerFactory>();
            try
            {
                // Applies the migrations and creating the Database at app startup
                var context = services.GetRequiredService<StoreContext>();
                await context.Database.MigrateAsync();
                // Adds data from the JSON files to our database
                //await StoreContextSeed.SeedAsync(context, loggerFactory);

                // Applies the migrations and creating the Database at app startup for identity -------------add this-------------------------
                var userManager = services.GetRequiredService<UserManager<AppUser>>();
                var identityContext = services.GetRequiredService<AppIdentityDbContext>();
                await identityContext.Database.MigrateAsync();
                //await AppIdentityDbContextSeed.SeedUsersAsync(userManager);
            }
            catch (Exception ex)
            {
                var logger = loggerFactory.CreateLogger<Program>();
                logger.LogError(ex, "An error occurred during migration");
            }

            host.Run();
        }


The above code will do:
When we run our project it will automatically update the database 



Adding a token generation service:---------------------------------------------------------------------------

FIrst we need to add Interface for this:
Core/Interfaces
ITokenService.cs:

using Core.Entities.Identity;

namespace Core.Interfaces
{
    public interface ITokenService
    {
        string CreateToken(AppUser user);
    }
}

Next we need to create a actual Servuce from the interface:
Infrastructure/Services
TokenService.cs:
using Core.Entities.Identity;
using Core.Interfaces;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace Infrastructure.Services
{
    public class TokenService: ITokenService
    {
        private readonly IConfiguration _config;
        private readonly SymmetricSecurityKey _key;
        public TokenService(IConfiguration config)
        {
            this._config = config;
            this._key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config["Token:Key"]));
        }

        public string CreateToken(AppUser user)
        {
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Email,user.Email),
                new Claim(ClaimTypes.GivenName,user.DisplayName)
            };
            var creds = new SigningCredentials(_key, SecurityAlgorithms.HmacSha512Signature);
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(claims),
                Expires = DateTime.Now.AddDays(3),
                SigningCredentials = creds,
                Issuer = _config["Token:Issuer"]
            };
            var tokenHandler = new JwtSecurityTokenHandler();
            var token=tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
        }
    }
}



Setting Up Identity to use token:-------------------------------------------------------------------------------

Inside API/StartUp.cs:
Inside ConfigureServices method:

            // add identity context - for authentication
            services.AddDbContext<AppIdentityDbContext>(options =>
            {
                options.UseSqlServer(Configuration["ConnectionString:IdentityConnection"]);
            });

            var builder = services.AddIdentityCore<AppUser>();
            builder = new IdentityBuilder(builder.UserType, builder.Services);
            builder.AddEntityFrameworkStores<AppIdentityDbContext>();
            builder.AddSignInManager<SignInManager<AppUser>>();
            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                .AddJwtBearer(options =>
                {
                    options.TokenValidationParameters = new TokenValidationParameters
                    {
                        ValidateIssuerSigningKey = true,
                        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration["Token:Key"])),
                        ValidIssuer = Configuration["Token:Issuer"],
                        ValidateIssuer=true,
                        ValidateAudience=false
                    };
                });

            services.AddScoped<ITokenService, TokenService>();

Inside configure Method for adding middlewares:

            app.UseCors("CorsPolicy"); // adding cors 

            app.UseAuthentication(); // adding authentication ---- here u need to add this line-----------

            app.UseAuthorization();


Inside appsettings.Development.json:
  "ConnectionString": {
    "EcomDB": "server=DESKTOP-DJ3D3T0\\SQLSERVER;database=EcomDB;Trusted_Connection=True;MultipleActiveResultSets=True",
    "Redis": "localhost",
    "IdentityConnection": "server=DESKTOP-DJ3D3T0\\SQLSERVER;database=IdentityDB;Trusted_Connection=True;MultipleActiveResultSets=True"
  },
  "Token": {
    "Key": "super_secret_key",
    "Issuer": "https://localhost:44332"
  },



For debugging purpose:-----------------------------------------------------------------------------------------------------

  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },

 to

  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Information",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },

-------------------------------------------------------------------------------------------------------------------------------

For this Project we need 4 DTOs:------------------------------------------------------------------------------------------

Inside API/DTOs/

using System.ComponentModel.DataAnnotations;

namespace API.Dtos
{
    public class AddressDto
    {
        [Required]
        public string FirstName { get; set; }
        [Required]
        public string LastName { get; set; }
        [Required]
        public string Street { get; set; }
        [Required]
        public string City { get; set; }
        [Required]
        public string State { get; set; }
        [Required]
        public string PinCode { get; set; }
    }
}


using System.ComponentModel.DataAnnotations;

namespace API.Dtos
{
    public class LoginDto
    {
        [Required]
        public string Email { get; set; }
        [Required]
        public string Password { get; set; }
    }
}


using System.ComponentModel.DataAnnotations;

namespace API.Dtos
{
    public class RegisterDto
    {
        [Required]
        public string DisplayName { get; set; }
        [Required]
        [EmailAddress]
        public string Email { get; set; }
        [Required]
        [RegularExpression("(?=^.{6,}$)(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&amp;*()_+}{&quot;:;'?/&gt;.&lt;,])(?!.*\\s).*$",
            ErrorMessage = "Password must have atleast 1 small-case letter, 1 Capital letter, 1 digit, 1 special character and the length should be min 6 characters.")]
        public string Password { get; set; }

    }
}


namespace API.Dtos
{
    public class UserDto
    {
        public string Email { get; set; }
        public string DisplayName { get; set; }
        public string Token { get; set; }
    }
}

Inside API/Helpers

MappingProfiles.cs:
using API.Dtos;
using AutoMapper;
using Core.Entities;
using Core.Entities.Identity;

namespace API.Helpers
{
    public class MappingProfiles : Profile
    {
        public MappingProfiles()
        {
            CreateMap<Product, ProductToReturnDto>()
                .ForMember(d => d.ProductBrand, o => o.MapFrom(s => s.ProductBrand.Name))
                .ForMember(d => d.ProductType, o => o.MapFrom(s => s.ProductType.Name))
                .ForMember(d => d.PictureUrl, o => o.MapFrom<ProductUrlResolver>());

            CreateMap<Address, AddressDto>().ReverseMap(); // --------for both way mapping of model to dto and dto to model------------
        }
    }
}



Now add controllers:------------------------------------------------------------------------------------------------------------

using API.Dtos;
using API.Errors;
using AutoMapper;
using Core.Entities.Identity;
using Core.Interfaces;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Security.Claims;
using System.Threading.Tasks;

namespace API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AccountController : BaseApiController
    {
        private readonly UserManager<AppUser> _userManager;
        private readonly SignInManager<AppUser> _signInManager;
        private readonly ITokenService _tokenService;
        private readonly IMapper _mapper;

        public AccountController(UserManager<AppUser> userManager,
            SignInManager<AppUser> signInManager,
            ITokenService tokenService,
            IMapper mapper)
        {
            this._userManager = userManager;
            this._signInManager = signInManager;
            this._tokenService = tokenService;
            this._mapper = mapper;
        }

        [HttpGet("login")]
        public async Task<ActionResult<UserDto>> Login([FromBody]LoginDto loginDto)
        {
            var user=await _userManager.FindByEmailAsync(loginDto.Email);
            if(user==null) return Unauthorized(new ApiResponse(401));
            var result = await _signInManager.CheckPasswordSignInAsync(user, loginDto.Password, false);
            if (!result.Succeeded) return Unauthorized(new ApiResponse(401));
            return new UserDto
            {
                Email = user.Email,
                Token = _tokenService.CreateToken(user),
                DisplayName = user.DisplayName,
            };
        }

        [HttpPost("register")]
        public async Task<ActionResult<UserDto>> Register([FromBody]RegisterDto registerDto)
        {
            if (CheckEmailExistsAsync(registerDto.Email).Result.Value) // calling an action which is in this file
            {
                return new BadRequestObjectResult(new ApiValidationErrorResponse
                {
                    Errors = new[]
                    {
                        "Email Address is in use"
                    }
                });
            }
            var user = new AppUser
            {
                DisplayName = registerDto.DisplayName,
                Email = registerDto.Email,
                UserName = registerDto.Email
            };
            var result = await _userManager.CreateAsync(user, registerDto.Password);
            if (!result.Succeeded) return BadRequest(new ApiResponse(400));
            return new UserDto
            {
                DisplayName = user.DisplayName,
                Token = _tokenService.CreateToken(user),
                Email = user.Email
            };
        }

        [Authorize]
        [HttpGet]
        public async Task<ActionResult<UserDto>> GetCurrentUser()
        {
            var email = User.FindFirstValue(ClaimTypes.Email);
            var user = await _userManager.FindByEmailAsync(email);
            if (user == null) return NotFound();
            return new UserDto
            {
                Email = user.Email,
                Token = _tokenService.CreateToken(user),
                DisplayName = user.DisplayName
            };

        }

        [HttpGet("emailexists")]
        public async Task<ActionResult<bool>> CheckEmailExistsAsync([FromQuery]string email)
        {
            return await _userManager.FindByEmailAsync(email) != null;
        }

        [Authorize]
        [HttpGet("address")]
        public async Task<ActionResult<AddressDto>> GetUserAddress()
        {
            var email = User.FindFirstValue(ClaimTypes.Email);
            var user = await _userManager.Users.Include(x => x.Address).SingleOrDefaultAsync(x => x.Email == email);
            return _mapper.Map<Address, AddressDto>(user.Address);
        }

        [Authorize]
        [HttpPut("address")]
        public async Task<ActionResult<AddressDto>> UpdateUserAddress(AddressDto address)
        {
            var email = User.FindFirstValue(ClaimTypes.Email);
            var user = await _userManager.Users.Include(x => x.Address).SingleOrDefaultAsync(x => x.Email == email);

            user.Address = _mapper.Map<Address>(address);

            var result = await _userManager.UpdateAsync(user);

            if (result.Succeeded) return Ok(_mapper.Map<AddressDto>(user.Address));
            return BadRequest("Problem updating the user");
        }
    }
}





API validation:----------------------------------------------------------------------------------------------------------------------

We can have data validations in DTO instead of specifying them in the models

To get reg ex for passwords:
https://regexlib.com/Search.aspx?k=password



Client: Identity:--------------------------------------------------------------------------------------------------------------------

Adding an account feature
Forms in angular
Reactive forms
Reusable form components
Client side validation
Async validation



Applying guards:--------------------------------------------------------------------------------------------------------------------

blocking the pages which are unauthorized

Ceate a folder guards inside the core folder 

$ cd src/app/core/guards
$ ng g
Available Schematics:
  Collection "@schematics/angular" (default):
    app-shell
    application
    class
    component
    directive
    enum
    guard
    interceptor
    interface
    library
    module
    pipe
    resolver
    service
    service-worker
    web-worker
$ ng g g auth --skip-tests
? Which interfaces would you like to implement? CanActivate
CREATE src/app/core/guards/auth.guard.ts (457 bytes)


auth.guard.ts:

import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { AccountService } from 'src/app/account/account.service';

@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {
  constructor(private accountService:AccountService,private router:Router){}

  canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {
    return this.accountService.currentUser$.pipe(
      map(auth=>{
        if(auth){
          return true
        }
        // if authentication is successful
        // we navigate to 'account/login'
        // and send the prev url from where we get the guard in queryParams
        // we get the prev url from the state
        this.router.navigate(['account/login'], {queryParams: {returnUrl: state.url}})
      })
    )
  }  
}



app-routing-module.ts:
import { HomeComponent } from './home/home.component';
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { TestErrorComponent } from './core/test-error/test-error.component';
import { NotFoundComponent } from './core/not-found/not-found.component';
import { ServerErrorComponent } from './core/server-error/server-error.component';
import { AuthGuard } from './core/guards/auth.guard';

const routes: Routes = [
  {path:'',component:HomeComponent, data:{breadcrumb:'Home'}},
  {path:'test-error',component:TestErrorComponent, data:{breadcrumb:'Test Error'}},
  {path:'not-found',component:NotFoundComponent, data:{breadcrumb:'Not Found'}},
  {path:'server-error',component:ServerErrorComponent, data:{breadcrumb:'Server Error'}},
  {path:'shop',loadChildren:()=>import('./shop/shop.module').then(mod=>mod.ShopModule), data:{breadcrumb:'Shop'}}, // lazy loading from shop module -> shopModule loaded here automatically
  {path:'basket',loadChildren:()=>import('./basket/basket.module').then(mod=>mod.BasketModule), data:{breadcrumb:'Basket'}},
  {path:'checkout',
  canActivate:[AuthGuard], // ----------------------------------------------here we add guards--------------------------------------
  loadChildren:()=>import('./checkout/checkout.module').then(mod=>mod.CheckoutModule), data:{breadcrumb:'Checkout'}},
  {path:'account',loadChildren:()=>import('./account/account.module').then(mod=>mod.AccountModule), data:{breadcrumb:{skip:true}}},
  {path:'**',redirectTo:'not-found',pathMatch:'full'} // if user types a wrong url -> redirect to home 
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }



login.component.ts:
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { AccountService } from '../account.service';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss']
})
export class LoginComponent implements OnInit {
  loginForm:FormGroup
  returnUrl:string //------------------------------------------------ we need to add a variable -------------------------------------

  constructor(private fb:FormBuilder,private service:AccountService,private router:Router,private activatedRoute:ActivatedRoute) { }

  ngOnInit(): void {
    // after login where we need to redirect to some url
    // if there is any return url we need to return that else we return to shop
    this.returnUrl=this.activatedRoute.snapshot.queryParams.returnUrl || '/shop' // ------------------here---------------------------

    this.createLoginForm()
  }

  get email(){return this.loginForm.get('email')}
  get password(){return this.loginForm.get('password')}

  createLoginForm(){
    this.loginForm=this.fb.group({
      email:['',[Validators.required,Validators.pattern("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$")]],
      password:['',Validators.required]
    })
  }
  
  onSubmit(){
    console.log(this.loginForm.value)
    this.service.login(this.loginForm.value).subscribe(resp=>{
      console.log(localStorage.getItem('token'))
      //this.router.navigateByUrl('/shop')
      this.router.navigateByUrl(this.returnUrl) // -------------------------after logging in we redirect to a return url--------------
    },err=>{
      console.log(err)
    })
  }

}

















