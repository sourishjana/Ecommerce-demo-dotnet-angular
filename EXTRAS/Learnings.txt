> mkdir ecom
> cd ecom
ecom> dotnet -h
ecom> dotnet new sln
ecom> dotnet new webapi -o API
ecom> dotnet sln -h
ecom> dotnet sln add API

ecom> dotnet new classlib -o Core
ecom> dotnet new classlib -o Infrastructure
ecom> dotnet sln add Core
ecom> dotnet sln add Infrastructure


Here Core will contain all our entities
Infrastructure will contain all our migrations

In API add refrence of Infrastructure
In Infrastructure add reference of Core


Add a .gitignore file in the ecom dir

and initialize git repo in the ecom

Here we will be using repository pattern:----------------------------------------

Client request
Controllers (IRepository)	---> GetProducts(), GetProduct(int id)
Repository 			---> _context.Products.ToList()
DbContext			---> select * from products
database 


Add EntityFramework in the Infrastructure class lib by:
Infrastructure -> Dependencies -> rightclick -> Manage Newget packages -> browse -> EntityFramework -> add

All the verions of packages must be same to the 
dotnet version
e.g 5.0.4 should be followed when installing packages


PM> dotnet
PM> dotnet --version
5.0.404

PM> dotnet tool install --global dotnet-ef 		// we cant just download any version , vsersion must be >=dotnet package
PM> dotnet tool install --global dotnet-ef --version 5.0.4
PM> dotnet tool list -g
PM> dotnet ef -h
PM> dotnet ef migrations add InitialCreate -o Data/Migrations // will not work as we need to goto a perticular dir
PM> dir
PM> cd API
PM> dotnet ef migrations add InitialCreate -o Data/Migrations // migrations created in a specific dir
PM> dotnet ef database -h 
PM> dotnet ef database update



Use 
using Microsoft.EntityFrameworkCore;
instead of
using System.Data.Entity;


In order to create new Migration from begining:
1) Goto sqlserver and delete all tables inside the DB
2) and Remove all the migrations from the Migrations folder
3) again add migrations

In order to generate migrations in a particular class lib dir

first goto the project level from a particlar class lib or project:
If we are inside API:

PM> cd ..
PM> dir

Now we are in base dir i.e Ecom

PM> dotnet ef migrations add InitialCreate -p Infrastructure -s API -o Data/Migrations

dotnet ef -> the package name
migrations -> we will be working with migrations
add InitialCreate -> adding a new migrations 
-p Infrastructure -> the project where we are applying migrations
-s API -> need to specify starting project 
-o Data/Migrations -> In which folder we need to save the Migrations


CHANGES TILL NOW DONOT MAKE SENSE:
1) In the Program.cs file we have changes the main method which helps in 
	Applying the migrations and creating the Database at app startup
2) In the Infrastructure we added 'SeedData' folder and 'StoreContextSeed.cs' file
	which is used to add data from the json file to the tables on app startup



IN ORDER TO GET DATA INTO OUR SQL TABLES FROM JSON FILES:--------------------------------------

USE [EcomDB]
GO

/*  

F:\dotnet+angular\ecom\EXTRAS\SeedData\brands.json
is just the path 
copy path and paste it here 

Below code is to add json data from a fiel.json to sql server table

*/

Declare @JSON varchar(max)
SELECT @JSON=BulkColumn
FROM OPENROWSET (BULK 'F:\dotnet+angular\ecom\EXTRAS\SeedData\brands.json', SINGLE_CLOB) import

INSERT INTO [dbo].[ProductBrands]
SELECT *
FROM OPENJSON (@JSON)
WITH 
(
	[Name] nvarchar(max)
)
GO


delete from [dbo].[ProductBrands]

select * from [dbo].[ProductBrands]

/*

Below code
Used to reset the index to 1 so that indexing can again start from 1

*/
DBCC CHECKIDENT ('[ProductBrands]', RESEED, 0);
GO



2 branch created:
1) boilerplare_code
2) main-advanced

In order to push code in main-advanced branch now onwards:

> git checkout -b main-advanced
> git add .
> git commit -m "Repository Pattern Added advanced"
> git push origin main-advanced
> git status
	On branch main-advanced
	nothing to commit, working tree clean


> git branch
  main
* main-advanced

> git checkout main
Switched to branch 'main'
Your branch is up to date with 'origin/main'.

> git branch
* main
  main-advanced

> git checkout main-advanced
Switched to branch 'main-advanced'

> git branch
  main
* main-advanced



We can switch between branches and we can see diff codes totally 
even locally
we can see in which branch we are in by using 'git branch'

We can clone code from a branch:
git clone -b <branchname> <remote-repo-url>

git pull   ->   to pull changes from main tracked branch


In order to use DTO:
we need 
AutoMapper.Extensions.Microsoft.DependencyInjection


NOTE:
Loading static files:
Those files which needs to be loaded as it is when we are hitting an url needs to be kept under
'wwwroot' folder inside main project (In our API)

And we need to add a middleware in the Configure Method in Startup.cs
NOTE: as sequencing of middlewares are important:----------------------------------------------

We need to add one middleware 'app.UseStaticFiles()' under the 'app.UseRouting()'

	app.UseRouting();

        app.UseStaticFiles(); // load static images -

And Job is done




















